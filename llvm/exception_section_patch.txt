diff --git a/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h b/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h
index 5c5495d0f37..344eb08b6f4 100644
--- a/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h
+++ b/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h
@@ -75,6 +75,11 @@ public:
                                      const MachineBasicBlock &MBB,
                                      const TargetMachine &TM) const override;
 
+  MCSection *
+  getEHSectionForMachineBasicBlock(const Function &F,
+                                   const MachineBasicBlock &MBB,
+                                   const TargetMachine &TM) const override;
+
   bool shouldPutJumpTableInFunctionSection(bool UsesLabelDifference,
                                            const Function &F) const override;
 
diff --git a/llvm/include/llvm/Target/TargetLoweringObjectFile.h b/llvm/include/llvm/Target/TargetLoweringObjectFile.h
index eccb82f01f6..b49829e2c93 100644
--- a/llvm/include/llvm/Target/TargetLoweringObjectFile.h
+++ b/llvm/include/llvm/Target/TargetLoweringObjectFile.h
@@ -100,6 +100,12 @@ public:
   getColdSectionForMachineBasicBlock(const Function &F,
                                      const MachineBasicBlock &MBB,
                                      const TargetMachine &TM) const;
+
+  virtual MCSection *
+  getEHSectionForMachineBasicBlock(const Function &F,
+                                   const MachineBasicBlock &MBB,
+                                   const TargetMachine &TM) const;
+
   /// Classify the specified global variable into a set of target independent
   /// categories embodied in SectionKind.
   static SectionKind getKindForGlobal(const GlobalObject *GO,
diff --git a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
index 216217261c5..40318d0df76 100644
--- a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
+++ b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@ -3022,7 +3022,14 @@ void AsmPrinter::EmitBasicBlockStart(const MachineBasicBlock &MBB) {
     }
     // With -fbasicblock-sections, a basic block can start a new section.
     if (MBB.isExceptionSection()) {
-      OutStreamer->SwitchSection(MF->getSection());
+      if (MF->front().isExceptionSection()) {
+        OutStreamer->SwitchSection(MF->getSection());
+      }
+      else {
+        OutStreamer->SwitchSection(
+            getObjFileLowering().getEHSectionForMachineBasicBlock(
+                MF->getFunction(), MBB, TM));
+      }
     } else if (MBB.isColdSection()) {
       // Create the cold section here.
       OutStreamer->SwitchSection(
diff --git a/llvm/lib/CodeGen/MachineFunction.cpp b/llvm/lib/CodeGen/MachineFunction.cpp
index 60bbe738426..c85ddaebf97 100644
--- a/llvm/lib/CodeGen/MachineFunction.cpp
+++ b/llvm/lib/CodeGen/MachineFunction.cpp
@@ -373,14 +373,17 @@ bool MachineFunction::sortBasicBlockSections() {
     // A unique BB section can only be created if this basic block is not
     // used for exception table computations.  Entry basic block cannot
     // a section because the function starts one.
-    if (MBB.getNumber() == this->front().getNumber())
+    bool UsesEHInfo = HasEHInfo(MBB);
+    if (MBB.getNumber() == this->front().getNumber()) {
+      if (UsesEHInfo)
+        MBB.setExceptionSection();
       continue;
+    }
     // Also, check if this BB is a cold basic block in which case sections
     // are not required with the list option.
     bool isColdBB =
         ((Target.getBasicBlockSections() == llvm::BasicBlockSection::List) &&
          !S.count(MBB.getNumber()));
-    bool UsesEHInfo = HasEHInfo(MBB);
     if (UsesEHInfo) {
       MBB.setExceptionSection();
     } else if (isColdBB) {
diff --git a/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp b/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp
index 7faf7984e24..d803772f179 100644
--- a/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp
+++ b/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp
@@ -792,6 +792,25 @@ MCSection *TargetLoweringObjectFileELF::getColdSectionForMachineBasicBlock(
                                     GroupName);
 }
 
+MCSection *TargetLoweringObjectFileELF::getEHSectionForMachineBasicBlock(
+    const Function &F, const MachineBasicBlock &MBB,
+    const TargetMachine &TM) const {
+  SmallString<128> Name;
+  Name = (static_cast<MCSectionELF *>(MBB.getParent()->getSection()))
+             ->getSectionName();
+  Name += ".eh";
+
+  unsigned Flags = ELF::SHF_ALLOC | ELF::SHF_EXECINSTR;
+  std::string GroupName = "";
+  if (F.hasComdat()) {
+    Flags |= ELF::SHF_GROUP;
+    GroupName = F.getComdat()->getName();
+  }
+  return getContext().getELFSection(Name, ELF::SHT_PROGBITS, Flags, 0,
+                                    GroupName);
+}
+
+
 static MCSectionELF *getStaticStructorSection(MCContext &Ctx, bool UseInitArray,
                                               bool IsCtor, unsigned Priority,
                                               const MCSymbol *KeySym) {
diff --git a/llvm/lib/Target/TargetLoweringObjectFile.cpp b/llvm/lib/Target/TargetLoweringObjectFile.cpp
index 47689ff7498..2cd763974f2 100644
--- a/llvm/lib/Target/TargetLoweringObjectFile.cpp
+++ b/llvm/lib/Target/TargetLoweringObjectFile.cpp
@@ -317,6 +317,12 @@ MCSection *TargetLoweringObjectFile::getColdSectionForMachineBasicBlock(
     const TargetMachine &TM) const {
   return nullptr;
 }
+
+MCSection *TargetLoweringObjectFile::getEHSectionForMachineBasicBlock(
+    const Function &F, const MachineBasicBlock &MBB,
+    const TargetMachine &TM) const {
+  return nullptr;
+}
 /// getTTypeGlobalReference - Return an MCExpr to use for a
 /// reference to the specified global variable from exception
 /// handling information.
