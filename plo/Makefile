# Customizable variables.
# Vanilla clang/clang++ bin path.

paths.mk :
	@if [[ ! -e "paths.mk" ]] ; then \
		touch $@ ; \
		echo "RELEASE_LLVM_BIN=/path/to/llvm/bin" >> $@ ; \
		echo "CREATE_LLVM_PROF_DIR=/path/to/create_llvm_prof_dir" >> $@ ; \
		echo "BOLT=/path/to/llvm-bolt" >> $@ ; \
		echo "PERF2BOLT=/path/to/perf2bolt" >> $@ ; \
		exit 1 ; \
	fi

include paths.mk

check_environment: paths.mk
	@if [[ ! -e "${RELEASE_LLVM_BIN}/clang" ]] || \
	    [[ ! -e "${BOLT}" ]] || \
	    [[ ! -e "${PERF2BOLT}" ]] || \
	    [[ ! -d "${CREATE_LLVM_PROF_DIR}" ]] ; then \
	  echo "Invalid entries found in \"paths.mk\", please check." ; \
	  exit 1 ; \
	fi
	touch $@

CREATE_LLVM_PROF=${CREATE_LLVM_PROF_DIR}/create_llvm_prof

#################################
# Important targets:
#  stage1-compiler: the compiler contains all the patches and used to do benchmark.
#  pgo-vanilla-compiler: thinlto optimized compiler based on pgo perf data, w/o bblabels
#  pgo-compiler: thinlto optimized compiler based on pgo perf data, w/ bblabels
#  cspgo-compiler: similar to above, except it's context sensitive pgo optimized binary.
#  pgo-plo-compiler: plo on top of pgo-compiler using perf.data.
#  pgo-plolist-compiler: similar to above, but using list.
#  cspgo-plo-compiler: plo on top of cspgo-compiler
#  pgo-bolt-compiler: bolt on top of pgo-compiler
#  cspgo-bolt-compiler: bolt on top of cspgo-compiler
#  benchmark-*-compiler: benchmarks
#  all-compilers: build all compilers
#  all-benchmarks: run all benchmarks
#
# Supporting targets:
#  stage-pgo stage-cspgo: instrumented compilers
#  stage-pgo.profdata stage-cspgo.profdata: profiles generated by instrumented compilers (pgo/cspgo)
#  pgo.perfdata cspgo.perfdata: perfdata collected from running pgo/cspgo-compilers
#  run-commands.sh / commands: script that runs a compiler over hundreds of compilation jobs.

DDIR := $(shell pwd)
LLVM_PROJECT := $(shell cd $(DDIR)/.. && pwd)
LLVM_SOURCE := $(shell find $(LLVM_PROJECT)/llvm \
                            $(LLVM_PROJECT)/clang \
                            $(LLVM_PROJECT)/lld \
        '(' -ipath "*/.git"      -o      \
            -ipath "*/test"      -o      \
            -ipath "*/tests"     -o      \
            -ipath "*/unittests" -o      \
            -ipath "*/gtest"     -o      \
            -ipath "*/googletest" ')' -type d  -prune -o \
        -type f '(' -iname "*.cpp" -o -iname "*.cc" -o -iname "*.c" \
                   -o -iname "*.h" -o -iname "*.td" ')' -print)

ifeq ($(J_NUMBER),)
J_NUMBER := $(shell grep -Ee "^core id" /proc/cpuinfo | wc -l)
J_NUMBER := $(shell if [[ "$(J_NUMBER)" -lt "16" ]] ; then \
                        echo $$(($(J_NUMBER) / 8 * 7)) ; \
                    else echo $$(($(J_NUMBER) - 5)); fi)
endif

STAGE1_BIN         := $(DDIR)/stage1/install/bin
PROFILES_DIR       := $(DDIR)/stage2/build/profiles
CSPROFILES_DIR     := $(DDIR)/cspgo/build/csprofiles
LLD_NO_OPT         := -fuse-ld=lld -Wl,-no-optimize-bb-jumps
LLD_OPT            := -fuse-ld=lld -Wl,-optimize-bb-jumps
FLAVORS            := stage1 nonepgo nonepgolabels pgo pgo-vanilla pgo-plo pgo-plolist cspgo cspgo-plo pgo-bolt cspgo-bolt pgo-plo-noorder pgo-plo-align
ALL_COMPILERS      := $(foreach F,$(FLAVORS),$(F)-compiler)
ALL_PMU_BENCHMARKS := $(foreach F,$(FLAVORS),benchmark-pmu-$(F))
ALL_BENCHMARKS     := $(foreach F,$(FLAVORS),benchmark-$(F))

# $1 are compiler flags.
# $2 are ld flags.
gen_build_flags = -DCMAKE_C_FLAGS=$(1) -DCMAKE_CXX_FLAGS=$(1) \
                  -DCMAKE_EXE_LINKER_FLAGS=$(2) \
                  -DCMAKE_SHARED_LINKER_FLAGS=$(2) \
                  -DCMAKE_MODULE_LINKER_FLAGS=$(2)

# $1 is either "labels", "all" or "none".
# -fexperimental-new-pass-manager -mllvm -qualify-function-names
bb_section_lto_flags = -Wl,--lto-basicblock-sections=$(1)
#-Wl,--lto-unique-bb-section-names
lld_relocs              := -Wl,-q
funique_flag            := -funique-internal-funcnames
#-funique-bb-section-names

bb_section_none_flags      := $(call gen_build_flags,"-fbasicblock-sections=none $(funique_flag)","   $(lld_relocs) $(LLD_NO_OPT) $(call bb_section_lto_flags,none)")
bb_section_labels_flags    := $(call gen_build_flags,"-fbasicblock-sections=labels $(funique_flag)"," $(lld_relocs) $(LLD_NO_OPT) $(call bb_section_lto_flags,labels)")
bb_section_all_flags       := $(call gen_build_flags,"-fbasicblock-sections=all $(funique_flag)","    $(lld_relocs) $(LLD_OPT) $(call bb_section_lto_flags,all)")
bb_section_list_flags       = $(call gen_build_flags,"-fbasicblock-sections=$1 $(funique_flag)","$(lld_relocs) $(LLD_NO_OPT) $(call bb_section_lto_flags,$1)")

# $1 is compiler name, "stage1", "instrbb", etc;
# $2 is bin directory that is used to build the compiler, must be absolute path.
# $3 is any other cmake flags (optional)
# $4 is llvm enabled projects
# $5 is target
#	    -DLLVM_PARALLEL_LINK_JOBS=$(J_NUMBER)
define build_compiler
	if [[ ! -e "$(1)/build/CMakeCache.txt" ]]; then \
	  mkdir -p $(1)/build ;                         \
	  cd $(1)/build && cmake -G Ninja               \
            -DCMAKE_INSTALL_PREFIX=$(DDIR)/$(1)/install \
	    -DCMAKE_BUILD_TYPE=Release                  \
            -DLLVM_OPTIMIZED_TABLEGEN=On                \
            -DLLVM_TARGETS_TO_BUILD="X86"               \
	    -DLLVM_USE_LINKER="lld"	                \
	    -DCMAKE_C_COMPILER=$(2)/clang               \
	    -DCMAKE_CXX_COMPILER=$(2)/clang++           \
	    -DCMAKE_ASM_COMPILER=$(2)/clang             \
	    $(3)                                        \
            -DLLVM_ENABLE_PROJECTS=$(4)                 \
            $(LLVM_PROJECT)/llvm;                       \
	fi
	ninja -j$(J_NUMBER) -C $(1)/build $(5)
	touch $@
endef

all-compilers: $(ALL_COMPILERS)

all-benchmarks: $(ALL_BENCHMARKS)

stage1/install/bin/clang: check_environment $(LLVM_SOURCE)
	$(call build_compiler,stage1,$(RELEASE_LLVM_BIN),,"clang;compiler-rt;lld",install)

stage1-compiler: stage1/install/bin/clang
	ln -sf $< $@
	touch $@

stage-pgo/build/bin/clang-10: | stage1-compiler
	$(call build_compiler,stage-pgo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_BUILD_INSTRUMENTED=IR,"clang;compiler-rt;lld",all)

stage-pgo-compiler stage-cspgo-compiler nonepgo-compiler nonepgolabels-compiler pgo-compiler pgo-vanilla-compiler cspgo-compiler: %-compiler: %/build/bin/clang-10 | check_environment
	ln -sf $< $@
	touch $@

pgo-plo-compiler pgo-plolist-compiler cspgo-plo-compiler: %-compiler: %/build/bin/clang-10-plo
	ln -sf $< $@
	touch $@

pgo-plo-align-compiler cspgo-plo-align-compiler: %-align-compiler: %/build/bin/clang-10-plo-align
	ln -sf $< $@
	touch $@

pgo-plo-compiler.symorder pgo-compiler.symorder: %.symorder: %
	llvm-nm -nS $< | sed -nEe '/(.+)\s(.+)\s(W|t|T)\s(.+)/p' | sed -Ee 's!(.+)\s(a+\.BB\.)(.+)!\1 \2 \3!' | awk '$$4~/^a+\.BB\.$$/{print $$1 " " $$2 " " $$3 " " length($$4)-4 ".BB." $$5} $$4!~/^a+\.BB\.$$/{print $$0}' > $@

pgo-plo-noorder-compiler: pgo-plo/build/bin/clang-10
	ln -sf $< $@
	touch $@

pgo-bolt-compiler cspgo-bolt-compiler pgo-vanilla-bolt-compiler: %-bolt-compiler: %/build/bin/clang-10-bolt
	ln -sf $< $@
	touch $@

stage-cspgo.profdata stage-pgo.profdata: %.profdata: %-compiler run-commands.sh  | stage1-compiler
	./run-commands.sh $(shell readlink -f $<)
	$(STAGE1_BIN)/llvm-profdata merge -output=$@ `find $(dir $(shell readlink -f $<))../ -path "*/csprofiles/*.profraw" -o -path "*/profiles/*.profraw"`

nonepgo/build/bin/clang-10: | stage1-compiler
	$(call build_compiler,nonepgo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld $(bb_section_none_flags),"clang;compiler-rt;lld",clang lld)

nonepgolabels/build/bin/clang-10: | stage1-compiler
	$(call build_compiler,nonepgolabels,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld $(bb_section_labels_flags),"clang;compiler-rt;lld",clang lld)

pgo-vanilla/build/bin/clang-10: stage-pgo.profdata
	$(call build_compiler,pgo-vanilla,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(bb_section_none_flags),"clang;compiler-rt;lld",clang lld)

pgo/build/bin/clang-10: stage-pgo.profdata
	$(call build_compiler,pgo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(bb_section_labels_flags),"clang;compiler-rt;lld",clang lld)

pgo-plo/build/bin/clang-10: stage-pgo.profdata
	$(call build_compiler,pgo-plo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(bb_section_all_flags),"clang;compiler-rt;lld",clang lld)

pgo-plolist/build/bin/clang-10: stage-pgo.profdata pgo-compiler.propeller
	$(call build_compiler,pgo-plolist,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(call bb_section_list_flags,$(DDIR)/pgo-compiler.propeller),"clang;compiler-rt;lld",clang lld)

pgo.perfdata cspgo.perfdata pgo-vanilla.perfdata: %.perfdata: %-compiler run-commands.sh
	perf record -o $@ -e cycles:u -j any,u -- ./run-commands.sh $(shell readlink -f $<)

pgo-compiler.propeller cspgo-compiler.propeller: %-compiler.propeller: %-compiler %.perfdata
	${CREATE_LLVM_PROF} --binary=`readlink -f $<` --format=propeller --profile=$(word 2,$^) --out=$@ --logtostderr

pgo-compiler.yaml cspgo-compiler.yaml pgo-vanilla-compiler.yaml: %-compiler.yaml: %.perfdata %-compiler
	$(PERF2BOLT) -o $(subst .perfdata,.fdata,$<) -w $@ -p $< $(shell readlink -f $(word 2,$^))

pgo/build/bin/clang-10-bolt cspgo/build/bin/clang-10-bolt pgo-vanilla/build/bin/clang-10-bolt: %/build/bin/clang-10-bolt: %-compiler.yaml %-compiler
	$(BOLT) $(shell readlink -f $(word 2,$^)) -o $@ -b $< \
		 -split-functions=3                     \
		 -reorder-blocks="cache+"               \
	 	 -reorder-functions="hfsort" -relocs=1  \
		 2>&1 | tee $@.autolog

pgo-plo/build/bin/clang-10-plo cspgo-plo/build/bin/clang-10-plo: %-plo/build/bin/clang-10-plo: relink-clang-%-plo.sh stage1-compiler
	./$<
	[[ -e "$@" ]] || { echo "Failed to link $@" ; exit 1; }

pgo-plo/build/bin/clang-10-plo-align cspgo-plo/build/bin/clang-10-plo-align: %-plo/build/bin/clang-10-plo-align: relink-clang-%-plo-align.sh stage1-compiler
	./$<
	[[ -e "$@" ]] || { echo "Failed to link $@" ; exit 1; }

pgo-plolist/build/bin/clang-10-plo: pgo-%/build/bin/clang-10-plo: relink-clang-pgo-%.sh stage1-compiler
	./$<
	[[ -e "$@" ]] || { echo "Failed to link $@" ; exit 1; }

stage-cspgo/build/bin/clang-10: stage-pgo.profdata | stage1-compiler
	$(call build_compiler,stage-cspgo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_BUILD_INSTRUMENTED=CSIR -DLLVM_ENABLE_LTO=Thin,"clang;compiler-rt;lld",all)

cspgo/build/bin/clang-10: stage-cspgo.profdata stage-pgo.profdata | stage1-compiler
	$(STAGE1_BIN)/llvm-profdata merge -output=stage-cspgo2.profdata stage-cspgo.profdata stage-pgo.profdata
	$(call build_compiler,cspgo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/stage-cspgo2.profdata -DLLVM_ENABLE_LTO=Thin $(bb_section_labels_flags),"clang;compiler-rt;lld",clang lld)

cspgo-plo/build/bin/clang-10: stage-cspgo.profdata stage-pgo.profdata | stage1-compiler
	$(STAGE1_BIN)/llvm-profdata merge -output=stage-cspgo2.profdata stage-cspgo.profdata stage-pgo.profdata
	$(call build_compiler,cspgo-plo,$(DDIR)/stage1/install/bin,-DLLVM_USE_LINKER=lld -DLLVM_PROFDATA_FILE=$(DDIR)/stage-cspgo2.profdata -DLLVM_ENABLE_LTO=Thin $(bb_section_all_flags),"clang;compiler-rt;lld",clang lld)

run-commands.sh: | stage1-compiler
	rsync -a -f "+ */" -f "+ *.inc" -f "+ *.h" -f "+ *.def" -f "- *" \
            stage1/build/ test-build/
	ninja -C stage1/build -t commands clang \
            | grep -E "^$(RELEASE_LLVM_BIN)/clang\+?\+? " \
            | grep -Fe " -c " \
            | sed -Ee 's!^$(RELEASE_LLVM_BIN)/clang\+\+ !$${CCP} -x c++ !' \
                   -e 's!^$(RELEASE_LLVM_BIN)/clang !$${CCP} !' \
                   -e 's!^!cd $(DDIR)/test-build \&\& !' >> commands
	if [[ -z `cat commands` ]]; then \
		echo "Empty commands file, ERROR." ; exit 1 ; \
	fi
	echo "export CCP=\$$1" > run-commands.sh
	echo "head -n 300 commands | xargs -P50 -L1 -d \"\\n\" bash -x -c" \
                >> run-commands.sh
	chmod +x run-commands.sh

#  -Wl,-plo -Wl,-symfile=$(DDIR)/pgo-compiler.symfile -Wl,-profile=pgo-compiler.profile \

# $1 must be "all"
define do_relink
	if [[ "$(2)" == "align" ]]; then \
	   ALIGNFLAG="-Wl,-propeller-align-basicblocks" ; \
	   ALIGNSUFFIX="-align" ; \
	fi ; \
	echo "pushd $(shell dirname $(shell dirname $<))" > $@ ; \
	ninja -C "$(shell dirname $(shell dirname $<))" -t commands clang \
          | grep -Fe " -o bin/clang-10 " \
          | sed -e "s! -o bin/clang-10 ! -o bin/clang-10-plo$${ALIGNSUFFIX} \
                     -Wl,--lto-basicblock-sections=$1     \
		     -Wl,-propeller=$(DDIR)/$(word 2,$^)  \
		     -Wl,-propeller-opt=reorder-blocks    \
		     -Wl,-propeller-opt=reorder-funcs     \
		     -Wl,-propeller-opt=split-funcs       \
		     -Wl,-propeller-keep-named-symbols    \
		     $${ALIGNFLAG} \
		     -Wl,-no-warn-symbol-ordering \
                     -Wl,--no-call-graph-profile-sort !"   \
		     -e 's!$(LLD_NO_OPT)!$(LLD_OPT)!g'           \
	       -e 's! -Wl,-q !!g' | tr '\t' ' ' | tr -s ' ' >> $@
	echo 'EV=$$? ; popd ; exit $$EV' >> $@
	@if [[ `wc -l $@ | cut -f1 -d' '` -gt 2 ]] ; then \
	  chmod +x $@ ; \
	  echo "Done generating $@." ; \
	else \
	  echo "Generate $@ failed."; exit 1; \
	fi
endef


relink-clang-pgo-plo.sh relink-clang-cspgo-plo.sh: \
relink-clang-%-plo.sh: %-plo/build/bin/clang-10 %-compiler.propeller
	$(call do_relink,all)

relink-clang-pgo-plo-align.sh relink-clang-cspgo-plo-align.sh: \
relink-clang-%-plo-align.sh: %-plo/build/bin/clang-10 %-compiler.propeller
	$(call do_relink,all,align)


relink-clang-pgo-plolist.sh: pgo-plolist/build/bin/clang-10 pgo-compiler.propeller
	$(call do_relink,$(DDIR)/pgo-compiler.propeller)

$(ALL_PMU_BENCHMARKS): benchmark-pmu-%: %-compiler run-commands.sh
	# origin: instructions,cycles,branches,branch-misses,icache_64b.iftag_stall,icache_64b.iftag_hit,icache_64b.iftag_miss,icache_16b.ifdata_stall,idq.dsb_uops,idq.mite_uops,idq.all_dsb_cycles_4_uops,itlb_misses.miss_causes_a_walk,itlb_misses.stlb_hit
	# for papers: cycles,instructions,br_inst_retired.all_branches,br_inst_retired.conditional,br_inst_retired.near_taken,br_inst_retired.not_taken,icache_64b.iftag_hit,icache_64b.iftag_miss,icache_16b.ifdata_stall,itlb_misses.miss_causes_a_walk,itlb_misses.stlb_hit 
	{ time perf stat -o $@.pmu --field-separator=, -e cycles,instructions,br_inst_retired.all_branches,br_inst_retired.conditional,br_inst_retired.near_taken,br_inst_retired.not_taken,icache_64b.iftag_hit,icache_64b.iftag_miss,icache_16b.ifdata_stall,itlb_misses.miss_causes_a_walk,itlb_misses.stlb_hit -- ./run-commands.sh $(shell readlink -f $<) ; } 2>&1 | tee $@.result

$(ALL_BENCHMARKS): benchmark-%: %-compiler run-commands.sh
	{ time ./run-commands.sh $(shell readlink -f $<) 2>&1 | grep -E "^(real|user|sys)" ; } 2>&1 | tee -a $@.result

# ###################################### Size gaugement
$(foreach F,nonepgo nonepgolabels pgo pgo-vanilla pgo-plo pgo-plolist,$(F).size-summaries): %.size-summaries: %-compiler | stage1-compiler
	find $(shell pwd)/$(subst -compiler,,$<)/build/lto.cache/ \
		-name "llvmcache*" -not -name "llvmcache.timestamp" -type f > $@.log1
	stage1/build/bin/report-size @$@.log1 > $@
	echo `readlink -f $<` >> $@
	stage1/build/bin/report-size `readlink -f $<` >> $@
	cat $@

# ######################################  sample workflow
sample_bblabels.o: sample.c
	./stage1-compiler -c -O2 -fbasicblock-sections=labels $< -o $@
	@[[ -n `readelf -Ws $@ | grep -F '.BB.'` ]] \
		|| { echo "No.BB.symbols found in $@, error" ; exit 1; }

sample.out: sample_bblabels.o stage1-compiler
	./stage1-compiler -fuse-ld=lld -Wl,-O2 -o $@ $<
	@[[ -n `readelf -Ws $@ | grep -F '.BB.'` ]] \
		|| { echo "No.BB.symbols found in $@, error" ; exit 1; }

sample.perfdata: sample.out
	perf record -o $@ -e "cycles:u" -j any,u -- ./$<

$(CREATE_LLVM_PROF): $(CREATE_LLVM_PROF_DIR)/*.cc $(CREATE_LLVM_PROF_DIR)/*.h
	make -C `dirname $@` -j50

sample.propeller: sample.perfdata $(CREATE_LLVM_PROF)
	$(CREATE_LLVM_PROF) --profile=$< --out=$@ --format=propeller --binary=sample.out --logtostderr

sample_bball.o: sample.c
	./stage1-compiler -flto=thin -c -O2 -fbasicblock-sections=all -funique-bb-section-names $< -o $@

sample_bball.out: sample_bball.o stage1-compiler
	./stage1-compiler -fuse-ld=lld -flto=thin -O2 -Wl,--lto-basicblock-sections=all  -Wl,--lto-unique-bb-section-names $< -o $@

sample.propeller.out: sample.propeller sample_bball.o stage1-compiler
	./stage1-compiler -o $@ -Wl,--lto-basicblock-sections=all -fuse-ld=lld -Wl,-propeller=$< -Wl,-propeller-keep-named-symbols -Wl,--lto-unique-bb-section-names $(word 2,$^)

sample.out.symfile: sample.out sample.perfdata
	./plotool.sh $^

sample.plo.out sample.out.cfg: sample.BB.ll.o sample.out.symfile sample.out.profile stage1-compiler
	stage1/install/bin/clang -fuse-ld=lld -Wl,-O2 \
	  -Wl,-plo \
	  -Wl,-symfile=sample.out.symfile \
	  -Wl,-profile=sample.out.profile \
	  -Wl,-cfgdump=sample.out.cfg \
	  sample.BB.ll.o -o sample.plo.out 2>&1 | tee sample.plo.out.autolog

sample.out.layout: sample.out.cfg stage1-compiler
	stage1/install/bin/layout -cfg-read $< -layout-dump $@ | tee $@.autolog

.phony: clean clean-all
.phone: $(foreach F,$(FLAVORS),dummy-$(F))
$(foreach F,$(FLAVORS),dummy-$(F)):

$(foreach F,$(FLAVORS),clean-$(F)): clean-%: dummy-%
	rm -fr $(subst dummy-,,$<){,-compiler,.profdata,.perfdata,-compiler.propeller,.fdata,.symfile,.yaml,.profile,.cfg,.size-summaries}
	if [[ "$(subst dummy-,,$<)" == "pgo" ]]; then rm -fr stage-pgo ; fi
	if [[ "$(subst dummy-,,$<)" == "cspgo" ]]; then rm -fr stage-cspgo ; fi

benchmark-pgo-bolt.result benchmark-pgo.result benchmark-pgo-plolist.result benchmark-pgo-plo.result: benchmark-%.result: benchmark-%

define check_against_baseline
	export R=$$(export BASELINE_M=`sed -n -Ee 's/^user\s+(.*)/\1/p' $1 | tail -1 | sed -nEe 's/^([[:digit:]]+)m.*/\1/p'` ; \
	export BASELINE_S=`sed -n -Ee 's/^user\s+(.*)/\1/p' $1 | tail -1 | sed -nEe 's/^.*m([[:digit:]]+)(\..*)s.*/\1/p'` ; \
	export PLO_M=`sed -n -Ee 's/^user\s+(.*)/\1/p' $2 | tail -1 | sed -nEe 's/^([[:digit:]]+)m.*/\1/p'` ; \
	export PLO_S=`sed -n -Ee 's/^user\s+(.*)/\1/p' $2 | tail -1 | sed -nEe 's/^.*m([[:digit:]]+)(\..*)s.*/\1/p'` ; \
	echo "scale=3; base=$$BASELINE_M*60+$$BASELINE_S; plo=$$PLO_M*60+$$PLO_S; improve=(base-plo)/base*100; print improve;" | bc); \
	echo "$2 improvement over $1: $${R}%" ; \
	if [[ `echo "$${R} > 6" | bc -l` == '1' ]]; then \
	  echo "Performance check passed: $2". ; \
	else \
	  echo "*** Performance check failed: $2, regression found." ; exit 1 ; \
	fi
endef

.DEFAULT_GOAL := check-performance

check-performance: benchmark-pgo.result benchmark-pgo-plolist.result benchmark-pgo-plo.result benchmark-pgo-bolt.result
	@$(call check_against_baseline,$<,$(word 2,$^))
	@$(call check_against_baseline,$<,$(word 3,$^))
	@$(call check_against_baseline,$<,$(word 4,$^))

clean:
	for F in $(filter-out stage1,$(FLAVORS)) stage-pgo stage-cspgo ; do \
	  rm -fr $${F}{,-compiler,.profdata,.perfdata,-compiler.propeller,.fdata,.symfile,-compiler.yaml,.profile,.cfg,.size-summaries} ; \
	  rm -f benchmark{-,pmu-}$${F}.result ; \
	  rm -f benchmark-pmu-$${F}.{result,pmu} ; \
	done
	rm -f  check_environment
	rm -f  commands run-commands.sh relink-clang-{cspgo,pgo}-plo{,list,all}.sh
	rm -f  sample.out sample.out.{layout,symfile,profile,cfg} 
	rm -f  sample_*.o sample.plo.out sample.perfdata sample.propeller sample.propeller.out
	rm -f  *.autolog *.log1

clean-all: clean
	rm -fr stage1 ; rm -fr stage1-compiler; rm -fr test-build
