# Customizable variables.
# Vanilla clang/clang++ bin path.
SHELL := /bin/bash

paths.mk :
	@if [[ ! -e "paths.mk" ]] ; then \
		echo "\"paths.mk\" doesn't exist. Creating an initial one!" ; \
		touch $@ ; \
		echo "RELEASE_LLVM_BIN=/usr/bin" >> $@ ; \
		echo "CREATE_LLVM_PROF_DIR=.." >> $@ ; \
		echo "BOLT=/path/to/llvm-bolt" >> $@ ; \
		echo "PERF2BOLT=/path/to/perf2bolt" >> $@ ; \
	fi

include paths.mk

ifeq '${CREATE_LLVM_PROF_DIR}' ''
CREATE_LLVM_PROF_DIR=$(shell pwd)/..
endif

DOIP       ?= 0
ENABLE_EH  ?= OFF
BUILD_TYPE ?= Release
ENABLE_ASSERTS ?= OFF

BOLT_RESULT := $(shell ( [[ -e "${BOLT}" ]] && [[ -e "${PERF2BOLT}" ]] ) && echo "benchmark-pgo-relocs-bolt.result" )
BOLT_PMU_RESULT := $(shell ( [[ -e "${BOLT}" ]] && [[ -e "${PERF2BOLT}" ]] ) && echo "benchmark-pmu-pgo-relocs-bolt.result" )
IP_RESULTS := $(shell ( [[ "${DOIP}" = "1" ]] ) && echo "benchmark-pgo-plointerp.result benchmark-pgo-plolistinterp.result" )
IP_PMU_RESULTS := $(shell ( [[ "${DOIP}" = "1" ]] ) && echo "benchmark-pmu-pgo-plointerp.result benchmark-pmu-pgo-plolistinterp.result" )

DDIR := $(shell pwd)
LLVM_PROJECT := $(shell cd $(DDIR)/.. && pwd)
CLANG_VERSION := $(shell sed -Ene 's!^\s+set\(LLVM_VERSION_MAJOR\s+([[:digit:]]+)\)$$!\1!p' ${LLVM_PROJECT}/llvm/CMakeLists.txt)

check_environment: paths.mk
	@if [[ ! -e "${RELEASE_LLVM_BIN}/clang" ]] || \
	    [[ ! -d "${CREATE_LLVM_PROF_DIR}" ]] ; then \
	  echo "Invalid entries found in \"paths.mk\", please check." ; \
	  exit 1 ; \
	fi
	@if [[ ! -e "${BOLT}" ]] || \
	    [[ ! -e "${PERF2BOLT}" ]] ; then \
	  echo "Invalid BOLT entries in \"paths.mk\", BOLT-related targets will not be built." ; \
	fi
	@if [[ -z "${CLANG_VERSION}" ]]; then \
	  echo "Invalid clang version found." ; \
	  exit 1 ; \
	fi
	echo "clang version is: ${CLANG_VERSION}" > $@

CREATE_LLVM_PROF=${CREATE_LLVM_PROF_DIR}/create_llvm_prof
ITERATIONS ?= 5
GITHASH := $(shell git rev-parse HEAD)
$(shell git diff > gitdiff)
DIFFHASH := $(shell cat gitdiff | sha1sum | awk '{print $$1}')

ifeq ("$(shell git status -s)", "")
	REPOSTATUS=CLEAN
else
	REPOSTATUS=DIRTY.${DIFFHASH}
endif

REPOHASH := ${GITHASH}.${REPOSTATUS}

#################################
# Important targets:
#  stage1-compiler: the compiler contains all the patches and used to do benchmark.
#  pgo-vanilla-compiler: thinlto optimized compiler based on pgo perf data, w/o bblabels
#  pgo-labels-compiler: thinlto optimized compiler based on pgo perf data, w/ bblabels
#  cspgo-compiler: similar to above, except it's context sensitive pgo optimized binary.
#  pgo-plo-compiler: plo on top of pgo-compiler using perf.data.
#  pgo-plolist-compiler: similar to above, but using list.
#  cspgo-plo-compiler: plo on top of cspgo-compiler
#  pgo-relocs-bolt-compiler: bolt on top of pgo-relocs-compiler
#  pgo-labels-bolt-compiler: bolt on top of pgo-labels-compiler
#  cspgo-bolt-compiler: bolt on top of cspgo-compiler
#  benchmark-*-compiler: benchmarks
#  all-compilers: build all compilers
#  all-benchmarks: run all benchmarks
#
# Supporting targets:
#  stage-pgo stage-cspgo: instrumented compilers
#  stage-pgo.profdata stage-cspgo.profdata: profiles generated by instrumented compilers (pgo/cspgo)
#  pgo.perfdata cspgo.perfdata: perfdata collected from running pgo/cspgo-compilers
#  run-commands.sh / commands: script that runs a compiler over hundreds of compilation jobs.
#

LLVM_SOURCE := $(shell find $(LLVM_PROJECT)/llvm \
                            $(LLVM_PROJECT)/clang \
                            $(LLVM_PROJECT)/lld \
			    $(LLVM_PROJECT)/libcxxabi \
        '(' -ipath "*/.git"      -o      \
            -ipath "*/test"      -o      \
            -ipath "*/tests"     -o      \
            -ipath "*/unittests" -o      \
            -ipath "*/gtest"     -o      \
            -ipath "*/googletest" ')' -type d  -prune -o \
        -type f '(' -iname "*.cpp" -o -iname "*.cc" -o -iname "*.c" \
                   -o -iname "*.h" -o -iname "*.td" ')' -print)

ifeq ($(J_NUMBER),)
J_NUMBER := $(shell grep -Ee "^core id" /proc/cpuinfo | wc -l)
J_NUMBER := $(shell if [[ "$(J_NUMBER)" -lt "16" ]] ; then \
                        echo $$(($(J_NUMBER) / 8 * 7)) ; \
                    else echo $$(($(J_NUMBER) - 5)); fi)
endif

comma              := ,
STAGE1_BIN         := $(DDIR)/stage1/install/bin
PROFILES_DIR       := $(DDIR)/stage2/build/profiles
CSPROFILES_DIR     := $(DDIR)/cspgo/build/csprofiles
LLD_NO_OPT         := -fuse-ld=lld -Wl,-no-optimize-bb-jumps
LLD_OPT            := -fuse-ld=lld -Wl,-optimize-bb-jumps
FLAVORS            := stage1 nonepgo nonepgolabels pgo-labels pgo-vanilla pgo-relocs pgo-plo pgo-plointerp pgo-plolist pgo-plo-funcs pgo-plolistinterp cspgo cspgo-plo pgo-labels-bolt pgo-vanilla-bolt pgo-relocs-bolt cspgo-bolt pgo-plo-noorder
ALL_COMPILERS      := $(foreach F,$(FLAVORS),$(F)-compiler)
ALL_PMU_BENCHMARKS := $(foreach F,$(FLAVORS),benchmark-pmu-$(F))
ALL_BENCHMARKS     := $(foreach F,$(FLAVORS),benchmark-$(F))

gen_compiler_flags  = -DCMAKE_C_FLAGS=$(1) -DCMAKE_CXX_FLAGS=$(1)
gen_linker_flags    = -DCMAKE_EXE_LINKER_FLAGS=$(1) -DCMAKE_SHARED_LINKER_FLAGS=$(1) -DCMAKE_MODULE_LINKER_FLAGS=$(1)

# $1 are compiler flags.
# $2 are ld flags.
gen_build_flags     = $(call gen_compiler_flags,$(1)) $(call gen_linker_flags,$(2))

# Use "_opt" suffix to name a bare option, e.g., options that are to be wrapped by -DCMAKE_C_FLAGS="....".
gc_sections_opt            := -Wl,-gc-sections
relocation_gen_opt         := -Wl,-q
interp_opt                 := -Wl,--propeller-opt=reorder-ip
other_opt                  := -Wl,-propeller-keep-named-symbols -Wl,-propeller-dump-symbol-order=order.txt
lto_bb_sections_all_opt    := -Wl,--lto-basicblock-sections=all

# Use "_flags" suffix to name cmake options, e.g., options that are wrapped by "-DCMAKE_XXX".
bb_section_none_flags      := $(call gen_build_flags,"-funique-internal-funcnames","${LLD_NO_OPT}")
bb_section_labels_flags    := $(call gen_build_flags,"-fpropeller-label -funique-internal-funcnames","-fuse-ld=lld $(relocation_gen_opt) $(gc_sections_opt)")
relocs_flags               := $(call gen_linker_flags,"$(relocation_gen_opt)")
bb_section_all_flags        = $(call gen_build_flags,"-funique-internal-funcnames -fpropeller-optimize=$(1) -fbasicblock-sections=all","-fpropeller-optimize=$(1) -fbasicblock-sections=all -fuse-ld=lld $(lto_bb_sections_all_opt) $(other_opt) $(gc_sections_opt)")
bb_section_list_flags       = $(call gen_build_flags,"-funique-internal-funcnames -fpropeller-optimize=$(1) $(2)","-fuse-ld=lld -fpropeller-optimize=$(1) $(other_opt) $(gc_sections_opt) $(3)")
bb_section_listinterp_flags = $(call gen_build_flags,"-funique-internal-funcnames -fpropeller-optimize=$(1) $(2)","-fuse-ld=lld -fpropeller-optimize=$(1) $(interp_opt) $(other_opt) $(gc_sections_opt) $(3)")
bb_section_allinterp_flags  = $(call gen_build_flags,"-funique-internal-funcnames -fpropeller-optimize=$(1) -fbasicblock-sections=all","-fpropeller-optimize=$(1) -fbasicblock-sections=all -fuse-ld=lld $(lto_bb_sections_all_opt) $(interp_opt) $(other_opt) $(gc_sections_opt)")

# $1 is any other cmake flags (optional)
# $2 is llvm enabled projects
# $3 is target
define build_compiler
	set -o pipefail ; \
	export TOOLCHAIN="$(shell if [[ "$@" == "stage1/install/bin/clang" ]]; then echo "$(RELEASE_LLVM_BIN)" ; else echo "$(DDIR)/stage1/install/bin" ; fi)" ; \
	export COMP_DIR="$(DDIR)/$(shell echo $@ | sed -Ee 's!([^/]+)/.*!\1!')" ; \
	if [[ -z "$${COMP_DIR}" ]]; then echo "Invalid dir name" ; exit 1; fi ; \
	echo "Building in directory: $${COMP_DIR} ... " ; \
	if [[ ! -e "$${COMP_DIR}/build/CMakeCache.txt" ]]; then \
	  mkdir -p $${COMP_DIR}/build ;                  \
	  cd $${COMP_DIR}/build && cmake -G Ninja        \
            -DCMAKE_INSTALL_PREFIX=$${COMP_DIR}/install \
            -DLLVM_OPTIMIZED_TABLEGEN=On                \
	    -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)            \
	    -DLLVM_ENABLE_EH=$(ENABLE_EH)               \
	    -DLLVM_ENABLE_RTTI=$(ENABLE_EH)             \
	    -DLLVM_ENABLE_LLD="On"                      \
	    -DCMAKE_LINKER="lld"                        \
            -DLLVM_TARGETS_TO_BUILD="X86"               \
	    -DCMAKE_C_COMPILER=$${TOOLCHAIN}/clang      \
	    -DCMAKE_CXX_COMPILER=$${TOOLCHAIN}/clang++  \
	    -DCMAKE_ASM_COMPILER=$${TOOLCHAIN}/clang    \
	    $(1)                                        \
            -DLLVM_ENABLE_PROJECTS=$(2)                 \
            $(LLVM_PROJECT)/llvm;                       \
	fi ; \
	ninja -j$(J_NUMBER) -C $${COMP_DIR}/build $(3) 2>&1 | tee $${COMP_DIR}.autolog || exit 1; \
	if ! echo "int main() {return 0;}" | $${COMP_DIR}/build/bin/clang -x c -c - -o ./build_compiler.tmpout ; then \
		echo Failed; exit 1 ; \
	else \
		rm -f ./build_compiler.tmpout ; \
	fi
	touch $@
endef

all-compilers: $(ALL_COMPILERS)

all-benchmarks: $(ALL_BENCHMARKS)

stage1/install/bin/clang: check_environment $(LLVM_SOURCE)
	$(call build_compiler,-DLLVM_ENABLE_ASSERTIONS=$(ENABLE_ASSERTS) $(shell if [[ -d "$(PROTOBUF_PREFIX)" ]]; then echo "-DProtobuf_PROTOC_EXECUTABLE=\"$(PROTOBUF_PREFIX)/bin/protoc\" -DProtobuf_INCLUDE_DIR=\"$(PROTOBUF_PREFIX)/include\" -DProtobuf_LIBRARY=\"$(PROTOBUF_PREFIX)/lib/libprotobuf.so\" $(call gen_linker_flags,\"-Wl$(comma)-rpath=$(PROTOBUF_PREFIX)/lib\")"; fi),"clang;compiler-rt;lld",install)

stage1_with_cxx_unwind/install/bin/clang: stage1-compiler check_environment $(LLVM_SOURCE)
	$(call build_compiler,-DCMAKE_BUILD_TYPE=Debug -DLIBCXXABI_USE_LLVM_UNWINDER=On -DLLVM_ENABLE_LLD= -DCMAKE_LINKER="gold","clang;compiler-rt;lld;libcxx;libcxxabi;libunwind",install install-cxx install-cxxabi)

stage1_debug/install/bin/clang: stage1-compiler check_environment $(LLVM_SOURCE)
	$(call build_compiler,-DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_ASSERTIONS=On ,"clang;compiler-rt;lld",install)

stage1-compiler stage1_debug-compiler stage1_with_cxx_unwind-compiler : %-compiler : %/install/bin/clang
	ln -sf $< $@
	touch $@

# Build isntrumented pgo-labels and pgo-relocs using the same pair of options.
stage-pgo-labels/build/bin/clang-${CLANG_VERSION} stage-pgo-relocs/build/bin/clang-${CLANG_VERSION}: | stage1-compiler
	$(call build_compiler,-DLLVM_BUILD_INSTRUMENTED=IR $(call gen_build_flags,"-funique-internal-funcnames","$(gc_sections_opt)"),"clang;compiler-rt;lld",all)

stage-pgo-vanilla/build/bin/clang-${CLANG_VERSION}: | stage1-compiler
	$(call build_compiler,-DLLVM_BUILD_INSTRUMENTED=IR,"clang;compiler-rt;lld",all)

stage-pgo-labels-compiler stage-pgo-vanilla-compiler stage-pgo-relocs-compiler stage1-stage-cspgo-compiler nonepgo-compiler nonepgolabels-compiler pgo-labels-compiler pgo-vanilla-compiler pgo-relocs-compiler cspgo-compiler pgo-plolist-compiler pgo-plo-compiler pgo-plolistinterp-compiler pgo-plointerp-compiler: %-compiler: %/build/bin/clang-${CLANG_VERSION} | check_environment
	ln -sf $< $@
	touch $@

pgo-plo-compiler.symorder pgo-compiler.symorder: %.symorder: %
	llvm-nm -nS $< | sed -nEe '/(.+)\s(.+)\s(W|t|T)\s(.+)/p' | sed -Ee 's!(.+)\s(a+\.BB\.)(.+)!\1 \2 \3!' | awk '$$4~/^a+\.BB\.$$/{print $$1 " " $$2 " " $$3 " " length($$4)-4 ".BB." $$5} $$4!~/^a+\.BB\.$$/{print $$0}' > $@

pgo-plo-noorder-compiler: pgo-plo/build/bin/clang-${CLANG_VERSION}
	ln -sf $< $@
	touch $@

pgo-labels-bolt-compiler pgo-relocs-bolt-compiler: %-bolt-compiler: %/build/bin/clang-${CLANG_VERSION}-bolt
	ln -sf $< $@
	touch $@

stage-cspgo.profdata stage-pgo-labels.profdata stage-pgo-vanilla.profdata stage-pgo-relocs.profdata: %.profdata: %-compiler run-commands.sh  | stage1-compiler
	./run-commands.sh $(shell readlink -f $<)
	$(STAGE1_BIN)/llvm-profdata merge -output=$@ `find $(dir $(shell readlink -f $<))../ -path "*/csprofiles/*.profraw" -o -path "*/profiles/*.profraw"`

nonepgo/build/bin/clang-${CLANG_VERSION}: | stage1-compiler
	$(call build_compiler,$(bb_section_none_flags),"clang;compiler-rt;lld",clang lld)

nonepgolabels/build/bin/clang-${CLANG_VERSION}: | stage1-compiler
	$(call build_compiler,$(bb_section_labels_flags),"clang;compiler-rt;lld",clang lld)

pgo-labels/build/bin/clang-${CLANG_VERSION} pgo-relocs/build/bin/clang-${CLANG_VERSION}: pgo-%/build/bin/clang-${CLANG_VERSION}: stage-pgo-%.profdata
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(bb_section_labels_flags),"clang;compiler-rt;lld",clang lld)

pgo-vanilla/build/bin/clang-${CLANG_VERSION}: stage-pgo-vanilla.profdata
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin,"clang;compiler-rt;lld",clang lld)

pgo-plo/build/bin/clang-${CLANG_VERSION}: stage-pgo-labels.profdata pgo-labels-compiler.propeller
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(call bb_section_all_flags,$(DDIR)/pgo-labels-compiler.propeller),"clang;compiler-rt;lld",clang lld)

pgo-plolist/build/bin/clang-${CLANG_VERSION}: stage-pgo-labels.profdata pgo-labels-compiler.propeller
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(call bb_section_list_flags,$(DDIR)/pgo-labels-compiler.propeller,,),"clang;compiler-rt;lld",clang lld)

# $1 is the COMP name only, without directory, "stage1/pgo-plolist/pgo-plofunsc/etc".
# $2 is extra options.
define gen_relink_script
	cd $(1)/build ; ninja -t commands clang | grep -Fe " -o bin/clang-$(CLANG_VERSION) " | \
		sed -e 's! -o bin/clang-$(CLANG_VERSION) ! -o bin/clang-$(CLANG_VERSION) $2 !' \
		    -e 's!: &&!!' -e 's!&& :!!' > $(DDIR)/$@.relink_script
	chmod +x $(DDIR)/$@.relink_script
endef

pgo-vanilla/build.resource pgo-labels/build.resource pgo-plolist/build.resource pgo-plo/build.resource: %/build.resource: %/build/bin/clang-$(CLANG_VERSION)
	$(call gen_relink_script,$(shell dirname $@),)
	cd $(shell dirname $@)/build; /usr/bin/time -v $(DDIR)/$@.relink_script 2>&1 | tee $(DDIR)/$@
	cd $(shell dirname $@)/build; find lto.cache/ -type f -name "llvmcache-*" 1>../build.objects 2>/dev/null ; \
		if [[ -n "`head -1 ../build.objects`" ]]; then \
			echo "All objects: " >> $(DDIR)/$@ ; \
			$(DDIR)/stage1/install/bin/report-size @../build.objects  | tee -a $(DDIR)/$@ ; \
		else \
			echo No object files found. ; rm -f $@ ; \
		fi
	echo "Size of $<:" >> $(DDIR)/$@
	$(DDIR)/stage1/install/bin/report-size $< | tee -a $(DDIR)/$@

pgo-plo/build/symbol-order pgo-plolist/build/symbol-order: %/build/symbol-order: %/build/bin/clang-$(CLANG_VERSION)
	cd $(shell dirname $@) ; ninja -t commands clang | grep -Fe " -o bin/clang-${CLANG_VERSION} " | \
		sed -e 's! -o bin/clang-${CLANG_VERSION} ! -o bin/clang-${CLANG_VERSION} -Wl,-propeller-dump-symbol-order=symbol-order -Wl,-propeller-dump-cfg=@@!' > gen-symbol-order.sh ; \
		if [[ ! -e "gen-symbol-order.sh" ]] || [[ "`wc -l gen-symbol-order.sh | cut -f1 -d' '`" == "0" ]]; then echo "Error extacting link commands." ; exit 1; fi ; \
		chmod +x ./gen-symbol-order.sh ; \
		./gen-symbol-order.sh
	touch $@

pgo-labels/build/bolt-symbol-order: pgo-labels/build/bolt-func-symbol-order pgo-labels/build/bolt-bb-symbol-order

pgo-labels/build/bolt-bb-symbol-order: pgo-labels-compiler.bolt.autolog pgo-labels/build/bin/clang-$(CLANG_VERSION)-bolt bbfilter
	cat $< | grep -E "^hh: " | sed -e 's!hh: !!' | ./bbfilter | cut -f 2 -d" " > $@

pgo-labels/build/bolt-func-symbol-order: pgo-labels-compiler.bolt.autolog pgo-labels/build/bin/clang-$(CLANG_VERSION)-bolt 
	grep -E "^hh: " $< | sed -e 's!hh: !!' | grep -vF ".BB." | cut -f 2 -d" " > $@.hot
	grep -E "^cc: " $< | sed -e 's!cc: !!' | grep -vF ".BB." | cut -f 2 -d" " > $@.cold
	touch $@

pgo-plolist/build/symbol-order-diff: pgo-plolist/build/hot-func-list pgo-labels/build/bolt-bb-symbol-order pgo-plolist/build/symbol-order
	cat $< | xargs -n 20 -P 50 ./compare_symbol_order.sh $(word 2,$^) $(word 3,$^) 2>&1 | tee $@

pgo-plolist/build/hot-func-list pgo-plo/build/hot-func-list: %/build/hot-func-list: %/build/symbol-order
	sed -n '0,/^Hot$$/p' $< | grep -vFe '.BB.' > $@

pgo-plolist_vs_plo.hot_func_order.diff: pgo-plolist/build/hot-func-list pgo-plo/build/hot-func-list
	cat $< | xargs -n 20 -P 50 ./compare_func_bb_order.sh 2>&1 | tee $@

pgo-plolistinterp/build/bin/clang-${CLANG_VERSION}: stage-pgo-labels.profdata pgo-labels-compiler.propeller
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(call bb_section_listinterp_flags,$(DDIR)/pgo-labels-compiler.propeller),"clang;compiler-rt;lld",clang lld)

pgo-plointerp/build/bin/clang-${CLANG_VERSION}: stage-pgo-labels.profdata pgo-labels-compiler.propeller
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_ENABLE_LTO=Thin $(call bb_section_allinterp_flags,$(DDIR)/pgo-labels-compiler.propeller),"clang;compiler-rt;lld",clang lld)

pgo-labels.perfdata cspgo.perfdata pgo-relocs.perfdata: %.perfdata: %-compiler run-commands.sh
	perf record -o $@ -e cycles:u -j any,u -- ./run-commands.sh $(shell readlink -f $<)

pgo-labels-compiler.propeller cspgo-compiler.propeller: %-compiler.propeller: %-compiler %.perfdata
	${CREATE_LLVM_PROF} --binary=`readlink -f $<` --format=propeller --profile=$(word 2,$^) --out=$@ --logtostderr 2>&1 | tee $@.autolog

pgo-labels-compiler.yaml cspgo-compiler.yaml pgo-relocs-compiler.yaml: %-compiler.yaml: %.perfdata %-compiler
	$(PERF2BOLT) -o $(subst .perfdata,.fdata,$<) -w $@ -p $< $(shell readlink -f $(word 2,$^))

pgo-labels/build/bin/clang-${CLANG_VERSION}-bolt cspgo/build/bin/clang-${CLANG_VERSION}-bolt pgo-relocs/build/bin/clang-${CLANG_VERSION}-bolt: %/build/bin/clang-${CLANG_VERSION}-bolt: %-compiler.yaml %-compiler $(BOLT)
	/usr/bin/time -v $(BOLT) $(shell readlink -f $(word 2,$^)) -o $@ -b $< \
		 -split-functions=3                     \
		 -split-all-cold                        \
		 -chain-split-threshold=1024            \
		 -print-cache-metrics                   \
		 -reorder-blocks="cache+"               \
	 	 -reorder-functions="hfsort+" -relocs=1 \
		 -split-eh                              \
		 2>&1 | tee $(word 2,$^).bolt.autolog


stage-cspgo/build/bin/clang-${CLANG_VERSION}: stage-pgo.profdata | stage1-compiler
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/$< -DLLVM_BUILD_INSTRUMENTED=CSIR -DLLVM_ENABLE_LTO=Thin,"clang;compiler-rt;lld",all)

cspgo/build/bin/clang-${CLANG_VERSION}: stage-cspgo.profdata stage-pgo.profdata | stage1-compiler
	$(STAGE1_BIN)/llvm-profdata merge -output=stage-cspgo2.profdata stage-cspgo.profdata stage-pgo.profdata
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/stage-cspgo2.profdata -DLLVM_ENABLE_LTO=Thin $(bb_section_labels_flags),"clang;compiler-rt;lld",clang lld)

cspgo-plo/build/bin/clang-${CLANG_VERSION}: stage-cspgo.profdata stage-pgo.profdata | stage1-compiler
	$(STAGE1_BIN)/llvm-profdata merge -output=stage-cspgo2.profdata stage-cspgo.profdata stage-pgo.profdata
	$(call build_compiler,-DLLVM_PROFDATA_FILE=$(DDIR)/stage-cspgo2.profdata -DLLVM_ENABLE_LTO=Thin $(bb_section_all_flags),"clang;compiler-rt;lld",clang lld)

benchmark-dir.o: | stage1-compiler
	mkdir -p benchmark-dir/source
	mkdir -p benchmark-dir/build
	rsync -av -f "- .git*" -f "+ clang/***" -f "+ lld/***" -f "+ llvm/***" -f "- *" $(DDIR)/../ benchmark-dir/source/
	cd benchmark-dir/build ; \
		export TOOLCHAIN="$(DDIR)/stage1/install/bin" ; \
		cmake -G Ninja -DCMAKE_C_COMPILER=$${TOOLCHAIN}/clang -DCMAKE_CXX_COMPILER=$${TOOLCHAIN}/clang++ -DCMAKE_ASM_COMPILER=$${TOOLCHAIN}/clang \
			       -DLLVM_ENABLE_PROJECTS="clang;lld" $(DDIR)/benchmark-dir/source/llvm ; \
		ninja clang lld
	echo "int main() {return 0;}" | benchmark-dir/build/bin/clang -x c -c - -o $@
	if [[ -z "benchmark-dir.o" ]]; then rm $@ ; exit 1; fi

run-commands.sh: benchmark-dir.o | stage1-compiler
	rm -f commands
	ninja -C benchmark-dir/build -t commands clang \
            | grep -E "^$(DDIR)/stage1/install/bin/clang\+?\+? " \
            | grep -Fe " -c " \
            | sed -Ee 's!^$(DDIR)/stage1/install/bin/clang\+\+ !$${CCP} -x c++ !' \
                   -e 's!^$(DDIR)/stage1/install/bin/clang !$${CCP} !' \
                   -e 's!^!cd $(DDIR)/benchmark-dir/build \&\& !' >> commands
	if [[ -z `cat commands` ]]; then \
		echo "Empty commands file, ERROR." ; exit 1 ; \
	fi
	echo "export CCP=\$$1" > run-commands.sh
	echo "head -n 500 commands | xargs -P50 -L1 -d \"\\n\" bash -x -c" \
                >> run-commands.sh
	chmod +x run-commands.sh

$(ALL_PMU_BENCHMARKS): benchmark-pmu-%: %-compiler run-commands.sh
	@{ echo "Running $@ for ${ITERATIONS} iterations..." ; \
		perf stat -r ${ITERATIONS} -o .$@.pmu --field-separator=, -e cycles:u,instructions:u,br_inst_retired.all_branches:u,br_inst_retired.conditional:u,br_inst_retired.near_taken:u,br_inst_retired.not_taken:u,icache_64b.iftag_hit:u,icache_64b.iftag_miss:u,icache_16b.ifdata_stall:u,itlb_misses.miss_causes_a_walk:u,itlb_misses.stlb_hit:u,idq.dsb_uops:u,idq.mite_uops:u,idq.ms_uops:u -- ./run-commands.sh $(shell readlink -f $<) &> /dev/null ; \
		awk 'NF {print "${REPOHASH},"$$0}' .$@.pmu ; \
	} | tee -a $@.result

$(ALL_BENCHMARKS): benchmark-%: %-compiler run-commands.sh
	@{ for i in {1..${ITERATIONS}}; do \
		echo "Running $@ ... iteration $$i/${ITERATIONS} ..." ; \
		/usr/bin/time --format "${REPOHASH} USER:%U SYS:%S WALL:%e STATUS:%x" ./run-commands.sh $(shell readlink -f $<) 2>&1 | grep "${REPOHASH}" ; \
	   done ; \
	} | tee -a $@.result

# ###################################### Size gaugement
$(foreach F,nonepgo nonepgolabels pgo pgo-vanilla pgo-plo pgo-plolist,$(F).size-summaries): %.size-summaries: %-compiler | stage1-compiler
	find $(shell pwd)/$(subst -compiler,,$<)/build/lto.cache/ \
		-name "llvmcache*" -not -name "llvmcache.timestamp" -type f > $@.log1
	stage1/build/bin/report-size @$@.log1 > $@
	echo `readlink -f $<` >> $@
	stage1/build/bin/report-size `readlink -f $<` >> $@
	cat $@

# ######################################  sample workflow : make sample.propeller.out
sample_bblabels.o: sample.c stage1-compiler
	./stage1-compiler -c -O2 -fpropeller-label $< -o $@
	@[[ -n `readelf -Ws $@ | grep -F '.BB.'` ]] \
		|| { echo "No.BB.symbols found in $@, error" ; exit 1; }

sample.baseline.out: sample_bblabels.o stage1-compiler
	./stage1-compiler -fpropeller-label -fuse-ld=lld -Wl,-O2 -o $@ $<
	@[[ -n `readelf -Ws $@ | grep -F '.BB.'` ]] \
		|| { echo "No.BB.symbols found in $@, error" ; exit 1; }

sample.baseline.perfdata: sample.baseline.out
	perf record -o $@ -e "cycles:u" -j any,u -- ./$<

sample.baseline.propeller: sample.baseline.perfdata sample.baseline.out $(CREATE_LLVM_PROF)
	$(CREATE_LLVM_PROF) --profile=$< --out=$@ --format=propeller --binary=$(word 2,$^) --logtostderr ; \
		sed -i '1d' $@

sample_bb.o: sample.c sample.baseline.propeller stage1-compiler
	./stage1-compiler -c -O2 -fpropeller-optimize=$(word 2,$^) $< -o $@

sample.propeller.out: sample_bb.o sample.baseline.propeller stage1-compiler
	./stage1-compiler -o $@ -fuse-ld=lld -fpropeller-optimize=$(word 2,$^) -Wl,-propeller-keep-named-symbols -Wl,-propeller-print-stats $< -Wl,-propeller-dump-cfg=@; \

# ######################################  sample workflow (thinlto flavor) : make sample.propeller.lto.out
sample_bblabels.lto.o: sample.c stage1-compiler
	./stage1-compiler -c -O2 -flto=thin -fpropeller-label $< -o $@

sample.baseline.lto.out: sample_bblabels.lto.o stage1-compiler
	./stage1-compiler -fpropeller-label -flto=thin -fuse-ld=lld -Wl,-O2 -o $@ $<
	@[[ -n `readelf -Ws $@ | grep -F '.BB.'` ]] \
		|| { echo "No.BB.symbols found in $@, error" ; exit 1; }

sample.baseline.lto.perfdata: sample.baseline.lto.out
	perf record -o $@ -e "cycles:u" -j any,u -- ./$<

sample.baseline.lto.propeller: sample.baseline.lto.perfdata sample.baseline.lto.out $(CREATE_LLVM_PROF)
	$(CREATE_LLVM_PROF) --profile=$< --out=$@ --format=propeller --binary=$(word 2,$^) --logtostderr ; \
		sed -i '1d' $@

sample_bb.lto.o: sample.c sample.baseline.lto.propeller stage1-compiler
	./stage1-compiler -c -O2 -flto=thin -fpropeller-optimize=$(word 2,$^) $< -o $@

sample.propeller.lto.out: sample_bb.lto.o sample.baseline.lto.propeller stage1-compiler
	./stage1-compiler -o $@ -flto=thin -Wl,--thinlto-cache-dir=sample.lto.cache -fuse-ld=lld -fpropeller-optimize=$(word 2,$^) -Wl,-propeller-keep-named-symbols -Wl,-propeller-print-stats $< -Wl,-propeller-dump-cfg=@; \

test_exception: test_exception.cpp stage1_with_cxx_unwind-compiler
	./stage1_with_cxx_unwind-compiler -ffunction-sections -std=c++11 -nostdinc++  -I./stage1_with_cxx_unwind/install/include/c++/v1/ -I/usr/lib/clang/8.0.1/include $< -S -o $@.s
	./stage1_with_cxx_unwind-compiler -stdlib=libc++ -L./stage1_with_cxx_unwind/install/lib -Wl,-rpath,./stage1_with_cxx_unwind/install/lib $@.s -o $@ -lc++

test_exception.plo: test_exception.cpp stage1_with_cxx_unwind-compiler
	./stage1_with_cxx_unwind-compiler -fbasicblock-sections=all -std=c++11 -nostdinc++  -I./stage1_with_cxx_unwind/install/include/c++/v1/ -I/usr/lib/clang/8.0.1/include $< -S -o $@.s
	./stage1_with_cxx_unwind-compiler -stdlib=libc++ -L./stage1_with_cxx_unwind/install/lib -Wl,-rpath,./stage1_with_cxx_unwind/install/lib $@.s -o $@ -lc++

.phony: clean clean-all clean-sample
.phone: $(foreach F,$(FLAVORS),dummy-$(F))
$(foreach F,$(FLAVORS),dummy-$(F)):

$(foreach F,$(FLAVORS),clean-$(F)): clean-%: dummy-%
	rm -fr $(subst dummy-,,$<){,-compiler,.profdata,.perfdata,-compiler.propeller,.fdata,.yaml,.profile,.cfg,.size-summaries}
	if [[ "$(subst dummy-,,$<)" == "pgo" ]]; then rm -fr stage-pgo ; fi
	if [[ "$(subst dummy-,,$<)" == "cspgo" ]]; then rm -fr stage-cspgo ; fi

benchmark-pgo-relocs-bolt.result benchmark-pgo-labels-bolt.result benchmark-pgo-labels.result benchmark-pgo-vanilla.result benchmark-pgo-plolist.result benchmark-pgo-plo.result benchmark-pgo-plolistinterp.result benchmark-pgo-plointerp.result: benchmark-%.result: benchmark-%
	touch $@

benchmark-pmu-pgo-relocs-bolt.result benchmark-pmu-pgo-labels-bolt.result benchmark-pmu-pgo-labels.result benchmark-pmu-pgo-vanilla.result benchmark-pmu-pgo-plolist.result benchmark-pmu-pgo-plo.result benchmark-pmu-pgo-plolistinterp.result benchmark-pmu-pgo-plointerp.result : benchmark-pmu-%.result: benchmark-pmu-%
	touch $@

define check_against_baseline
	export BASE=`sed -n -Ee 's/^${REPOHASH} USER:(.*) SYS:(.*) WALL:(.*)/(\1+\2)/p' $1 | tail -n ${ITERATIONS} | bc` ; \
	if [[ `echo $${BASE} | wc -w` != ${ITERATIONS} ]]; then \
	  echo "Performance check failed: not enough iterations for $1"; exit 1 ; \
	fi ; \
	export TEST=`sed -n -Ee 's/^${REPOHASH} USER:(.*) SYS:(.*) WALL:(.*)/(\1+\2)/p' $2 | tail -n ${ITERATIONS} | bc ` ; \
	if [[ `echo $${TEST} | wc -w` != ${ITERATIONS} ]]; then \
	  echo "Performance check failed: not enough iterations for $2"; exit 1 ; \
	fi ; \
	export IMPROVE=`paste <(echo "$${BASE}") <(echo "$${TEST}") | awk '{print 100*($$1-$$2)/$$1}' ` ; \
	export IMPROVE_AVG=`echo "$${IMPROVE}" | awk '{ total += $$1 } END { print total/${ITERATIONS} }' ` ; \
	export IMPROVE_STDDEV=`echo "$${IMPROVE}" | awk -v improve_avg=$${IMPROVE_AVG} '{ total += ($$1-improve_avg)**2 } END { print (total/${ITERATIONS})**0.5 }' ` ; \
	if [[ `echo "$${IMPROVE_AVG} > 3" | bc -l` == '1' ]]; then \
	  echo "Performance check passed: $2 [$${IMPROVE_AVG}% +-$${IMPROVE_STDDEV} improvement over $1]." ; \
	else \
	  echo "*** Performance check failed: $2, regression found." ; exit 1 ; \
	fi
endef

define check_pmu_against_baseline
	BASE=`sed -n -Ee "s/^${REPOHASH},(.*),,$3,(.*)/\1/p" $1 | tail -n 1` ; \
	TEST=`sed -n -Ee "s/^${REPOHASH},(.*),,$3,(.*)/\1/p" $2 | tail -n 1` ; \
	IMPROVE=`echo "scale=2; 100*($${TEST}-$${BASE})/$${BASE}" | bc` ; \
	printf "\t$${IMPROVE}"
endef

.DEFAULT_GOAL := stage1-compiler


define append_git_status
	echo -e "\n========================local diff against ${GITHASH}==========================" >> $1.${REPOHASH} ; \
	cat gitdiff >> $1.${REPOHASH} ; \
	echo -e "\n===========================end of local diff===================================" >> $1.${REPOHASH} ; \
	ln -sf $1.${REPOHASH} $1.${GITHASH} ; \
	ln -sf $1.${GITHASH} $1
endef

check-pmu-performance: benchmark-pmu-pgo-vanilla.result benchmark-pmu-pgo-plolist.result benchmark-pmu-pgo-plo.result $(IP_PMU_RESULTS) $(BOLT_PMU_RESULT)
	@PMU_EVENTS=( "cycles:u" "br_inst_retired.all_branches:u" "br_inst_retired.not_taken:u" "icache_64b.iftag_miss:u" "itlb_misses.miss_causes_a_walk:u" ) ; \
	echo "CHECK-PMU-PERFORMANCE" > $@.${REPOHASH} ; \
	printf "VERSIONS" >> $@.${REPOHASH} ; \
	for event in "$${PMU_EVENTS[@]}" ; do \
		printf "\t$${event}" >> $@.${REPOHASH} ; \
	done ; \
	printf "\n" >> $@.${REPOHASH} ; \
	for version in $(wordlist 2,$(words $^),$^) ; do \
		printf "$${version}" >> $@.${REPOHASH} ; \
		for event in "$${PMU_EVENTS[@]}" ; do \
			$(call check_pmu_against_baseline,$<,$$version,$$event) >> $@.${REPOHASH} ; \
		done ; \
		printf "\n" >> $@.${REPOHASH} ; \
	done ; \
	printf "\n" >> $@.${REPOHASH} ; \
	$(call append_git_status,$@)

check-performance: benchmark-pgo-vanilla.result benchmark-pgo-plolist.result benchmark-pgo-plo.result $(IP_RESULTS) $(BOLT_RESULT)
	@echo "CHECK-PERFORMANCE" > $@.${REPOHASH} ; \
	for version in $(wordlist 2,$(words $^),$^) ; do \
		$(call check_against_baseline,$<,$$version) >> $@.${REPOHASH} ; \
	done ; \
	$(call append_git_status,$@)

bbfilter: bbfilter.cc stage1-compiler
	./stage1-compiler -x c++ $< -O2 -o $@ -lstdc++

upstream-patches: generate-upstream-patches.sh generate-upstream-patches.filelist $(LLVM_SOURCE)
	bash -c "set -o pipefail ; ./$< | tee $@ || { rm -f $@; exit 1;}"

clean-sample:
	rm -f sample_bb.*o sample_bblabels.*o sample_bball.*o sample.*out sample.*perfdata sample.*propeller sample.*out.cfg.pb.txt

clean: clean-sample
	for F in $(filter-out stage1,$(FLAVORS)) stage-pgo-labels stage-pgo-vanilla stage-pgo-relocs stage-cspgo ; do \
	  rm -fr $${F}{,-compiler,.profdata,.perfdata,-compiler.propeller,.fdata,-compiler.yaml,.profile,.cfg,.size-summaries} ; \
	  rm -f benchmark{-,pmu-}$${F}.result ; \
	  rm -f benchmark-pmu-$${F}.{result,pmu} ; \
	done
	rm -f  check_environment
	rm -f  commands run-commands.sh
	rm -f  *.autolog *.log1
	rm -f check-performance check-performance.*
	rm -f check-pmu-performance check-pmu-performance.*
	rm -f gitdiff
	rm -f pgo-plolist_vs_plo.hot_func_order.diff
	rm -f bbfilter
	rm -f upstream-*.patch upstream-patches

clean-all: clean
	rm -fr stage1 ; rm -fr stage1-compiler; rm -fr test-build
	rm -fr benchmark-dir.o benchmark-dir/
	rm -fr stage1_with_cxx_unwind
